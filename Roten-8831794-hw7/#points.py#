#!/usr/bin/env python3
#

# Physics 129L HW7 Question1
# Jack Roten


# calculate the error for an ideal X0 from a track and get a histogram
# -------------------------------

import numpy as np
import matplotlib.pyplot as plt
import ccHistStuff as cc

# importing data
data = []
# x locations / where the detector is
x_detect = [2., 3., 5., 7.]
x1x0 = []
x2x0 = []
XavXo = []

''' straightTracks text has data in following format:
0	1	2	3	4	5	6	7	8	9 (columns)
X0 Y0 y00 y01 y02 y03 y10 y11 y12 y13
X0, Y0 = true common point of origin of pair (Y0 always 0)
yij = digitized coordinate of track i at detector j
j = 0/column3 & 6 x = 2;
j = 1/column4 & 7 x = 3;
j = 2/column5 & 8 x = 5;
j = 3/column6 & 9 x = 7 
All lengths in cm
'''
with open('straightTracks.txt', 'r') as f:
	data = [line.split() for line in f]

x0 = [float(data[0][0]), 2.,3.,5.,7.]
y0 = [float(data[0][1]), float(data[0][2]), float(data[0][3]), float(data[0][4]), float(data[0][5])]
m0, b0 = np.polyfit(x,y,1)
print("m= ", m,"b= ", b)
xInter = -b/m
print("X intercept", xInter)
x1x0 = abs(float(data[0][0]) - xInter)
print("Error difference", x1x0)



# plotting
xp = np.linspace(-5., 10., 100)
y1 = m*xp + b
plt.plot(xp, y1, '-r', label='y=mx+b')
plt.scatter(x,y)
plt.show()


# calculating the curve fit/linear regression
i = 0
xAvg = []
while i < len(data):
	# for track 0
	x = [float(data[i][0]), 2.,3.,5.,7.]
	y_0 = [float(data[i][1]), float(data[i][2]), float(data[i][3]), float(data[i][4]), float(data[i][5])]
	m0, b0 = np.polyfit(x,y_0,1)
	xInter0 = -b0/m0
	x1x0.append(abs(float(data[i][0]) - xInter0))
	# for track 1
	y_1 = [float(data[i][1]), float(data[i][6]), float(data[i][7]), float(data[i][8]), float(data[i][9])]
	m1, b1 = np.polyfit(x,y_1,1)
	xInter1 = -b1/m1
	x2x0.append(abs(float(data[i][0]) - xInter1))
	xAvg.append((xInter0 + xInter1)/2)
	i += 1


