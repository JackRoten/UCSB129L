#!/usr/bin/env python3
# homework2
# -------------------------------------------

import numpy as np
import math
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# Parameter for the plot
horizontalSize = 640
verticalSize = 400
c = complex(-0.79, 0.56)
zMax = 2
nMax = 255*2
xmin, xmax = -1.6,1.6
ymin, ymax = -1, 1
xLength = xmax = xmin
yLength = ymax - ymin

julia = np.zeros((horizontalSize,verticalSize))
# looping all pixels
for i in range(horizontalSize):
	for j in range(verticalSize):
		n = 0
		# Maps a pixel to a point in the complex plane
		xComponent = i / horizontalSize * xLength + xmin
		yComponent = j / verticalSize * yLength + ymin
		z = complex(xComponent, yComponent)
		
		# iterations
		while abs(z) <= zMax and n < nMax:
			z = z**2 + c
			n += 1
		shade = 1 - np.sqrt(n/nMax)
		ratio = n / nMax
		julia[i,j] = ratio
		
fig, ax = plt.subplots()
ax.imshow(julia, interpolation='nearest', cmap=cm.hot)
# starting at tick zero
xTick = np.linspace(xmin, xmax, xwidth / 0.5)
ax.set_xticks([(x-xmin) / xLength * horizontalSize for x in xTick])
ax.set_xticklabels(['{:.1f}'.format(xtick) for xtick in xTick])
yTick = np.linspace(ymin, ymax, yLength/0.5)
ax.set_yticks([(y-ymin) / yheight * verticalSize for y in yTick])
ax.set_yticklabels(['{:.1f}'.format(ytick) for ytick in ytick_labels])
fig.show()

input("Press <Enter> to exit")  # we are done
